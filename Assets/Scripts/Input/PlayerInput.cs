//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Scripts/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""PlayerBasic"",
            ""id"": ""99663f67-5b89-40db-8629-8a43ac089084"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""cb60b70f-af42-49b0-9ca7-4029b507b218"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""14310c42-927a-4efc-893e-7bd7ff416db4"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""cf8c9cae-8afb-4149-b3d0-ad032bae13c2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""b88b90ad-2206-481f-9e8c-32cf010173e2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SP_Attack"",
                    ""type"": ""Button"",
                    ""id"": ""75e9b3c7-608b-4ba3-ae67-2dc563e9fc3a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""13bb6760-00d5-421c-91c7-97f1bec90109"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f31b0e6e-5d7b-4a0d-9a59-800c551d1dfa"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""5142e25d-b6ac-4d37-9b9d-158194afed54"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6ae7ca61-3149-4e4c-817f-a4b384b07993"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""560c809f-8988-460f-b568-bda9c373f0a1"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""fa1a60f8-5b5e-4e39-9c64-5f5ca98d8a8d"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""246871af-3c9e-4d5a-ab05-a1449e32ee8c"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3434b7d0-16cc-444f-9ee5-df84e8f355f3"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7db90ea7-b016-4891-8a2a-e8523c65127c"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SP_Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerBasic
        m_PlayerBasic = asset.FindActionMap("PlayerBasic", throwIfNotFound: true);
        m_PlayerBasic_Move = m_PlayerBasic.FindAction("Move", throwIfNotFound: true);
        m_PlayerBasic_Jump = m_PlayerBasic.FindAction("Jump", throwIfNotFound: true);
        m_PlayerBasic_Attack = m_PlayerBasic.FindAction("Attack", throwIfNotFound: true);
        m_PlayerBasic_Interact = m_PlayerBasic.FindAction("Interact", throwIfNotFound: true);
        m_PlayerBasic_SP_Attack = m_PlayerBasic.FindAction("SP_Attack", throwIfNotFound: true);
    }

    ~@PlayerInput()
    {
        UnityEngine.Debug.Assert(!m_PlayerBasic.enabled, "This will cause a leak and performance issues, PlayerInput.PlayerBasic.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerBasic
    private readonly InputActionMap m_PlayerBasic;
    private List<IPlayerBasicActions> m_PlayerBasicActionsCallbackInterfaces = new List<IPlayerBasicActions>();
    private readonly InputAction m_PlayerBasic_Move;
    private readonly InputAction m_PlayerBasic_Jump;
    private readonly InputAction m_PlayerBasic_Attack;
    private readonly InputAction m_PlayerBasic_Interact;
    private readonly InputAction m_PlayerBasic_SP_Attack;
    public struct PlayerBasicActions
    {
        private @PlayerInput m_Wrapper;
        public PlayerBasicActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerBasic_Move;
        public InputAction @Jump => m_Wrapper.m_PlayerBasic_Jump;
        public InputAction @Attack => m_Wrapper.m_PlayerBasic_Attack;
        public InputAction @Interact => m_Wrapper.m_PlayerBasic_Interact;
        public InputAction @SP_Attack => m_Wrapper.m_PlayerBasic_SP_Attack;
        public InputActionMap Get() { return m_Wrapper.m_PlayerBasic; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerBasicActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerBasicActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerBasicActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerBasicActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @SP_Attack.started += instance.OnSP_Attack;
            @SP_Attack.performed += instance.OnSP_Attack;
            @SP_Attack.canceled += instance.OnSP_Attack;
        }

        private void UnregisterCallbacks(IPlayerBasicActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @SP_Attack.started -= instance.OnSP_Attack;
            @SP_Attack.performed -= instance.OnSP_Attack;
            @SP_Attack.canceled -= instance.OnSP_Attack;
        }

        public void RemoveCallbacks(IPlayerBasicActions instance)
        {
            if (m_Wrapper.m_PlayerBasicActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerBasicActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerBasicActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerBasicActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerBasicActions @PlayerBasic => new PlayerBasicActions(this);
    public interface IPlayerBasicActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnSP_Attack(InputAction.CallbackContext context);
    }
}
